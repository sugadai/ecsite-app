{"version":3,"sources":["task.js"],"names":["require","query","con","search","req","res","send","SignIn","username","body","password","errMsg","passwordErrMsg","usernameErrMsg","console","error","log","result","length","session","userid","id","email","redirect","SignUp","insertId","SignOut","err","destroy","new_password","addProduct","productname","price","category_id","exports","imgpath","module"],"mappings":"0BAAkBA,QAAQ,WAAlBC,eAAAA,MACFC,IAAMF,QAAQ,mBAGdG,OAAS,SAACC,EAAIC,GAHdH,EAAGI,KAAGN,oBAQZO,OAAA,SAAAH,EAAAC,GAGI,IAAMG,EAAWJ,EAAIK,KAAKD,SAFlBE,EAAGN,EAATG,KAAUH,SAENI,EAAWJ,CACXM,eAAW,GAEXC,eAAS,IAEG,IAAdC,IAFJD,EAAAE,eAAA,iBAIe,IAAZL,IACCG,EAAOE,eAAiB,kBAE5BC,QAAGJ,IAAQC,GACPA,IAAAA,MACH,uDAKI,CAACH,EAASE,GAHfI,SAAOC,EAAKJ,GAER,GAAAI,EAAA,MAAAA,EAGOA,QAAOC,IAAMD,EAAN,IACVE,EAAkBC,QAEdd,EAAIe,QAAQC,OAASH,EAAO,GAAGI,GADzBH,QAAOF,IAAA,iBAAAZ,EAAAe,QAAAC,QACTD,EAAQC,QAASH,SAArBA,EAAA,GAAAT,SACQQ,EAAIG,QAAAG,MAAAL,EAAqBE,GAAAA,MACAX,IAArBA,EAAAA,QAAWS,OACXK,EAAZC,SAA2B,qBACpBJ,EAAQC,SAARD,sBAMPL,QAAAE,IAAA,aAGAX,EAAIkB,SAAS,sBAOvBC,OAAS,SAACpB,EAAIC,GAAdmB,IAAMhB,EAAGJ,EAAToB,KAAUpB,SAENI,EAAWJ,EAAIK,KAAKD,MACpBc,EAAYb,EAAKa,KAAvBZ,SAGAR,IAAID,MAAAA,4DAIIa,CAAAA,EAAYG,EAAOQ,GACfN,SAAAA,EAAJF,GALR,GAMYE,QAAQX,IAAZS,EAAuBT,UACnBW,EAAQG,QAAQA,OAApBL,EAAAQ,SACQT,EAAIG,QAAAX,SAAgBS,EACzBF,EAAOI,QAAMJ,MAANO,EACNC,QAAJP,IAAA,gBAAAC,EAAAQ,UAVRV,EAAA,MAAAA,EANJV,EAAAkB,SAAA,uBAwBQG,QAAQ,SAAAtB,EAAMuB,GADlBb,QAAAE,IAAA,KAIAF,EAAAA,QAAYc,QAAZ,SAAAD,GACIJ,GAAAA,EAAS,MAAAI,IAGXjB,QAAQM,IAAG,WACbX,EAAMwB,SAAAA,YADJnB,SAAW,SAACN,EAAIC,GAKlBH,IAAID,EACAG,EAAAK,KAAAoB,aAGOF,EAAWA,EAANR,QAAAC,OAJhBlB,IAAAD,MAUJ,8CARQ,CAAC4B,EAAaT,GACd,SAACO,EAAIV,GAQPa,GAAUH,EAAG,MAAbG,EACFhB,QAAAE,IAAA,mBAAAI,GACMW,EAAAA,SAAAA,uBAKF9B,WAEC8B,SAAAA,EAAAA,GAGGjB,IAAAA,EAAAV,EAAAK,KAAAsB,YACIZ,EAAQW,EAAAA,KAAZE,MACAlB,EAAgBK,EAAAA,KAAQW,QACpBP,EAASnB,EAAAK,KAAAwB,YAfzB/B,IAAAD,MAOI,6EAYGiC,CAAAA,EAAUF,EAAAG,EAAAF,GAAO,SAAAN,EAANpB,GAAOiB,GAAAA,EAAR,MAAAG,EAAeD,QAAfV,IAAA,UAAuBN,EAAAA,QAAvBoB,WAAA1B,EAAAK,KAAgCN,QAAhCa,IAAAZ,EAAAe,QAAAW,YAAiDzB,EAAVyB,SAAAA,gCAOxDM,OAAAF,QAAA,CAAA3B,OAAAA,OAAAiB,OAAAA,OAAAE,QAAAA,QAAAhB,SAAAA,SAAAP,OAAAA,OAAA2B,WAAAA","file":"task.min.js","sourcesContent":["const { query } = require('express');\nconst con = require('../db/dbconnect')\n\n//商品検索\nconst search = (req,res) => {\n    res.send('puroduct search')\n}\n\n\n//ログイン\nconst SignIn = (req,res) =>{\n    // console.log(req.body)\n    const username = req.body.username;\n    const password = req.body.password;\n\n    const errMsg = {\n        usernameErrMsg : '',\n        passwordErrMsg : ''\n    }\n    if(username == '' ){\n        errMsg.usernameErrMsg = 'ユーザ名を入力してください';\n    }\n    if(password == ''){\n        errMsg.passwordErrMsg = 'パスワードを入力してください';\n    }\n    \n    console.log(errMsg)\n    con.query(\n        'SELECT * FROM USERS WHERE username=? AND password=?;'\n        ,[username,password],\n        (error,result)=>{\n            if(error) throw error;\n            console.log(result[0])\n            if(result.length){\n                req.session.userid = result[0].id;\n                console.log('ログイン成功ユーザーID： '+req.session.userid);\n                req.session.username = result[0].username;\n                req.session.email = result[0].email;\n                if(req.session.userid === 1){\n                    res.redirect('/api/v1/adminpage');\n                } else{\n                    res.redirect(`/api/v1/userpage`);\n                }\n                // console.log(req.session.username)\n                // res.render('userpage.ejs',{username: result[0].username});\n            }else{\n                console.log('認証に失敗しました')\n                res.redirect('/api/v1/signin')\n            }\n        }\n    )\n}\n\n//会員登録\nconst SignUp = (req,res) =>{\n    \n    const username = req.body.username;\n    const email = req.body.email;\n    const password = req.body.password;\n    // console.log(username,email,password)\n    con.query(\n        'INSERT INTO USERS (username,email,password) value(?,?,?);'\n        ,[username,email,password],\n        (error,result)=>{\n            console.log(result.insertId)\n            req.session.userid = result.insertId;\n            req.session.username = username\n            req.session.email = email;\n            console.log('会員登録されたユーザID：'+result.insertId)\n            if(error) throw error;\n            res.redirect(`/api/v1/userpage`)\n        }\n    )\n}\n\nconst SignOut = (req,res)=>{\n    console.log('a')\n    req.session.destroy((err)=>{\n        if(err) throw err\n    });\n    \n    console.log('ログアウト完了')\n    res.redirect('/api/v1');\n}\n\nconst password = (req,res) => {\n    const new_password = req.body.new_password\n    const userid = req.session.userid;\n    // console.log(new_password + ' ' + req.session.userid);\n    // sql = 'UPDATE users SET password = ? WHERE id = ?;';\n    con.query(\n        'UPDATE users SET password = ? WHERE id = ?;',\n        [new_password,userid],\n        (err,result)=>{\n            if(err) throw err\n            console.log('パスワード変更完了　ユーザID：' + userid);\n            res.redirect(`/api/v1/userpage`)\n        })\n}\n\n//商品追加\nconst addProduct = (req,res) =>{\n    // console.log(req.body)\n    const productname =  req.body.productname;\n    const price = req.body.price;\n    const imgpath = req.body.imgpath;\n    const category_id = req.body.category_id;\n    const sql = 'INSERT INTO product(productname,price,imgpath,category_id) value(?,?,?,?);'\n    con.query(\n        sql,\n        [productname,price,imgpath,category_id],\n        (err,result)=>{\n            if(err) throw err\n            console.log('商品追加完了')\n            req.session.addProduct = req.body;\n            console.log(req.session.addProduct)\n            res.redirect('/api/v1/addProductConfirm')\n        })\n}\n\nmodule.exports = {SignIn,SignUp,SignOut,password,search,addProduct}\n\n\n\n// const search = async (req,res) =>{\n//     console.log(req.query.puroduct);\n//     const client_id = `dj00aiZpPUhPVW9ISXpNN3Q0RSZzPWNvbnN1bWVyc2VjcmV0Jng9Mjc-`;\n//     // const query = req.query.puroduct;\n//     // const url = `https://shopping.yahooapis.jp/ShoppingWebService/V2/itemSearch?appid=${client_id}>query=${query}`;\n//     const params = {\n//         response_type : 'code',\n//         client_id : client_id,\n//         redirect_uri : `https://www.yahoo.co.jp/`,\n//         scope : 'email'\n//     }\n    \n//     const query = new URLSearchParams(params);\n\n//     const url = `https://auth.login.yahoo.co.jp/yconnect/v2/authorization?response_type=code&client_id=${client_id}&redirect_uri=https://www.yahoo.co.jp/&scope=openid`\n//     console.log(url)\n\n//     try {\n//         const resdata =  await fetch(url)\n//         console.log(resdata)\n//         const data = await resdata.json();\n//         console.log(data);\n//         res.send(resdata);\n//     } catch (error) {\n//         res.send(error.status)\n//     }\n// }"]}